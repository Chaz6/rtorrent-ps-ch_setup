# Standard PyroScope rTorrent Configuration slightly rewrited. Contains mainly UI enhacements and some useful commands.
# Set "pyro.extended" and "pyro.extended.ch" to 1 in main config to activate rTorrent-PS, rTorrent-PS-CH features, but ONLY if you actually run it!


##### begin: Defining and including color themes #####

# COMMAND: Defining selectable color theme configs
method.insert = cfg.theme.0, string|const|private, (cat,"color_scheme256-happy_pastel.rc")
method.insert = cfg.theme.1, string|const|private, (cat,"color_scheme256-solarized_yellow.rc")
method.insert = cfg.theme.2, string|const|private, (cat,"color_scheme256-solarized_blue.rc")

# COMMAND: Setting default theme config
method.insert = pyro.theme.selected, string|private, (cat,(cfg.theme.0))

# IMPORT: Import default color theme from external config
pyro.import = (pyro.theme.selected)

##### end: Defining and including color themes #####



##### begin: Useful command extensions #####

# LOG: Log extension switch setting
branch=pyro.extended=,print=rTorrent-PS\\\ features\\\ active!,print=rTorrent-PS\\\ features\\\ NOT\\\ active!

# COMMAND: Provide dummy multi-methods for plain rTorrent
branch=(not, (pyro.extended)), ((method.insert, ui.column.render, multi|rlookup|static))

# COMMAND: Return startup time (can be used to calculate uptime)
method.insert = startup_time,value|const,$system.time=

# COMMAND: Returns uptime (with the help of getUptime.sh script) in the form of "Up: 6 years, 5 months, 18 days, 02:39:57" (year/month info isn't shown if their value is 0)
method.insert = uptime, simple, "print=\"$execute.capture=\\\"$cat=$pyro.bin_dir=,getUptime.sh\\\",$system.time=,$startup_time=\""

# COMMAND: Returns current timestamp for items that have peers or 'last_active' timestamp otherwise
method.insert  = d.last_active, simple, "if=(d.peers_connected), (cat,(system.time)), (d.custom,last_active)"

# EVENTS: Timestamps: 'tm_loaded' (time loaded into client), 'tm_started' (time of *first* start)
method.set_key = event.download.inserted_new, tm_loaded,  ((d.custom.set, tm_loaded, ((cat,((system.time)))) ))
method.set_key = event.download.resumed,      tm_started, {(branch, ((not,((d.custom,tm_started)))), ((d.custom.set, tm_started, (cat,(system.time)))) )}

# EVENTS: Timestamp 'tm_downloaded' (time when meta (torrent) file was downloaded)
method.insert = d.tm_downloaded, simple|private, "execute.capture=sh,-c,\"echo -n \$(stat -c %Y \\\"$1\\\")\",getDownloadedDate,(d.tied_to_file)"
method.set_key = event.download.inserted_new, tm_downloaded, ((d.custom.set, tm_downloaded, ((cat,((d.tm_downloaded)))) ))

# COMMAND/SCHEDULE: Timestamp 'last_xfer' for items that transfer data
method.insert = pyro_last_xfer_check_min_rate, simple|private, "greater=((argument.0)),((pyro.last_xfer.min_rate))"
method.insert = d.last_xfer.is_active, simple, "or=(pyro_last_xfer_check_min_rate,(d.up.rate)), (pyro_last_xfer_check_min_rate,(d.down.rate))"
schedule2     = pyro_update_last_xfer, 33, 17, ((d.multicall2, active, "branch=((d.last_xfer.is_active)),((d.custom.set, last_xfer, (cat,(system.time))))" ))
method.insert = d.last_xfer, simple, "if=(d.last_xfer.is_active), (cat,(system.time)), (d.custom,last_xfer)"

# EVENTS: Activation intervals
method.insert  = pyro.activations.append, simple|private, "d.custom.set=activations,(cat,(d.custom,activations),(argument.0),(system.time)); d.save_resume="
method.set_key = event.download.paused,  ~activations, "pyro.activations.append=P"
method.set_key = event.download.resumed, ~activations, "pyro.activations.append=R"

##### end: Useful command extensions #####



##### begin: UI related commands and enhancements #####

### begin: UI commands ###

# UI/CMD: Use rtcontrol filter (^X s=KEYWORD, ^X t=TRACKER, ^X f="FILTER")
method.insert = s,simple|private,"execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,\"$cat=*,$argument.0=,*\""
method.insert = t,simple|private,"execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,\"$cat=\\\"alias=\\\",$argument.0=\""
method.insert = f,simple|private,"execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,$argument.0="

# UI/CMD: Add, remove, and show tags
method.insert = tag.add,  simple|private, "execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,-otag_show,--flush,--yes,--from-view,$d.hash=,//,--tag,$argument.0="
method.insert = tag.rm,   simple|private, "execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,-otag_show,--flush,--yes,--from-view,$d.hash=,//,--tag,\"$cat=-,$argument.0=\""
method.insert = tag.show, simple|private, "execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",--detach,-qV,-otag_show,--from-view,$d.hash=,//,--flush"

### end: UI commands ###


### begin: Extra column definitions ###

# Override Throttle column (⊘)
method.set_key = ui.column.render, "200:1:⊘", ((string.map, ((d.throttle_name)), {"", " "}, {NULL, "∞"}, {slowup, "⊼"}, {tardyup, "⊻"}))

# Add Unsafe data column (◎)
method.set_key = ui.column.render, "230:1:◎", ((string.map, ((cat, ((d.custom,unsafe_data)))), {0, " "}, {1, "⊘"}, {2, "⊗"}))

# Add Data directory column (⊕) (first character of parent directory)
method.set_key = ui.column.render, "250:1:⊕", ((d.parent_dir))

### end: Extra column definitions ###


### begin: Modifications for default views ###

# Set default view to STARTED on startup
schedule2 = set_default_view,0,0,((ui.current_view.set,started))

# UI/VIEW: SORT the collapsed MAIN view (view #1) by DOWNLOADED TIME desc and update it in every 20 seconds
branch=pyro.extended=,"view.collapsed.toggle=main"
branch=pyro.extended=,"view.sort_new     = main,\"compare=-,d.custom=tm_downloaded\"","view.sort_new     = main,greater=d.custom=tm_downloaded"
branch=pyro.extended=,"view.sort_current = main,\"compare=-,d.custom=tm_downloaded\"","view.sort_current = main,greater=d.custom=tm_downloaded"
# overrides the default scheduling in main.cc to run the command in every 20 seconds instead of 10, the effect will be the same. Note: we have to use the same schedule-name!
schedule2 = view.main,10,20,((view.sort,main))

# UI/VIEW: SORT the collapsed NAME view (view #2) by NAME and update it in every 20 seconds
branch=pyro.extended=,"view.collapsed.toggle=name"
branch=pyro.extended=,"view.sort_new     = name,\"compare=+,d.name=\"","view.sort_new     = name,less=d.name="
branch=pyro.extended=,"view.sort_current = name,\"compare=+,d.name=\"","view.sort_current = name,less=d.name="
# overrides the default scheduling in main.cc to run the command in every 20 seconds instead of 10, the effect will be the same. Note: we have to use the same schedule-name!
schedule2 = view.name,10,20,((view.sort,name))

# UI/VIEW: SORT the collapsed STARTED view (view #3) by LAST ACTIVE desc, group by COMPLETE, THROTTLE, DOWNLOAD, UPLOAD SPEED desc, update it in every 20 seconds (Note: do NOT SCHEDULE sorting/filtering on STARTED view until this bug gets fixed: https://github.com/rakshasa/rtorrent/issues/449)
# Items are grouped into incomplete, complete in that order. Each group is sorted by last_active field desc.
branch=pyro.extended=,"view.collapsed.toggle=started"
branch=pyro.extended=,"view.sort_new     = started,\"compare=+-+--,d.complete=,d.last_active=,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_new     = started,greater=d.last_active="
branch=pyro.extended=,"view.sort_current = started,\"compare=+-+--,d.complete=,d.last_active=,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_current = started,greater=d.last_active="
# !!! Sorting on Started view requires rtorrent-PS-CH >= v1.3 or rtorrent/rtorrent-PS with the fix !!!
schedule2 = sort_started,12,20,((view.sort,started))

# UI/VIEW: SORT the collapsed STOPPED view (view #4) by DOWNLOADED TIME desc, group by COMPLETE, THROTTLE  (Note: do NOT SCHEDULE sorting/filtering on STOPPED view until this bug gets fixed: https://github.com/rakshasa/rtorrent/issues/449)
# Items are grouped into complete, incomplete in that order. Each group is devided again into subgroups special, slowup group in that order. Each subgroup is sorted by tm_downloaded field desc.
branch=pyro.extended=,"view.collapsed.toggle=stopped"
branch=pyro.extended=,"view.sort_new     = stopped,\"compare=++-,d.complete=,d.throttle_name=,d.custom=tm_downloaded\"","view.sort_new     = stopped,greater=d.custom=tm_downloaded"
branch=pyro.extended=,"view.sort_current = stopped,\"compare=++-,d.complete=,d.throttle_name=,d.custom=tm_downloaded\"","view.sort_current = stopped,greater=d.custom=tm_downloaded"

# UI/VIEW: SORT the collapsed COMPLETE view (view #5) by COMPLETED TIME desc
branch=pyro.extended=,"view.collapsed.toggle=complete"
branch=pyro.extended=,"view.sort_new     = complete,\"compare=-,d.custom=tm_completed\"","view.sort_new     = complete,greater=d.custom=tm_completed"
branch=pyro.extended=,"view.sort_current = complete,\"compare=-,d.custom=tm_completed\"","view.sort_current = complete,greater=d.custom=tm_completed"

# UI/VIEW: SORT the collapsed INCOMPLETE view (view #6) by DOWNLOAD, UPLOAD SPEED desc, group by OPEN desc, THROTTLE
# Items are grouped into started, stopped group in that order. Each group is devided again into subgroups special, slowup group in that order. Each subgroup is sorted by download and then upload speed desc.
branch=pyro.extended=,"view.collapsed.toggle=incomplete"
branch=pyro.extended=,"view.sort_new     = incomplete,\"compare=-+--,d.is_open=,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_new     = incomplete,greater=d.down.rate="
branch=pyro.extended=,"view.sort_current = incomplete,\"compare=-+--,d.is_open=,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_current = incomplete,greater=d.down.rate="

# UI/VIEW: SORT the HASHING view (view #7) by LOADED TIME, group by THROTTLE
# Items are grouped into special, slowup group in that order. Each group is sorted by tm_loaded field desc.
branch=pyro.extended=,"view.sort_new     = hashing,\"compare=++,d.throttle_name=,d.custom=tm_loaded\"","view.sort_new     = hashing,less=d.custom=tm_loaded"
branch=pyro.extended=,"view.sort_current = hashing,\"compare=++,d.throttle_name=,d.custom=tm_loaded\"","view.sort_current = hashing,less=d.custom=tm_loaded"

# UI/VIEW: SORT the collapsed SEEDING view (view #8) by the UPLOAD SPEED desc, group by THROTTLE and only show torrents with peers and update it in every 20 seconds
# Items are grouped into special, slowup group in that order. Each group is sorted by upload speed desc.
view.filter = seeding,"and={d.complete=,d.peers_connected=}"
branch=pyro.extended=,"view.collapsed.toggle=seeding"
branch=pyro.extended=,"view.sort_new     = seeding,\"compare=+-,d.throttle_name=,d.up.rate=\"","view.sort_new     = seeding,greater=d.up.rate="
branch=pyro.extended=,"view.sort_current = seeding,\"compare=+-,d.throttle_name=,d.up.rate=\"","view.sort_current = seeding,greater=d.up.rate="
schedule2 = sort_filter_seeding,12,20,((view.sort,seeding))

# UI/VIEW: SORT the LEECHING view (view #9) by DOWNLOAD, UPLOAD SPEED desc, group by THROTTLE and only show torrents with peers and update it in every 20 seconds
# Items are grouped into special, slowup group in that order. Each group is sorted by download and then upload speed desc.
view.filter = leeching,"and={not=$d.complete=,d.peers_connected=}"
branch=pyro.extended=,"view.sort_new     = leeching,\"compare=+--,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_new     = leeching,greater=d.down.rate="
branch=pyro.extended=,"view.sort_current = leeching,\"compare=+--,d.throttle_name=,d.down.rate=,d.up.rate=\"","view.sort_current = leeching,greater=d.down.rate="
schedule2 = sort_filter_leeching,12,20,((view.sort,leeching))

# UI/VIEW: SORT the collapsed ACTIVE view (view #0) by DOWNLOAD, UPLOAD SPEED desc, group by OPEN desc, THROTTLE, COMPLETE desc. Show active, incomplete torrents and update it in every 20 seconds
# Items are grouped by whether they are open and throttle (e.g. slowup). Each group is devided again into subgroups complete, incomplete, in that order. Each subgroup is sorted by download and then upload speed desc.
view.filter = active,"or={d.up.rate=,d.down.rate=,not=$d.complete=}"
branch=pyro.extended=,"view.collapsed.toggle=active"
branch=pyro.extended=,"view.sort_new     = active,\"compare=-+---,d.is_open=,d.throttle_name=,d.complete=,d.down.rate=,d.up.rate=\"","view.sort_new     = active,greater=d.up.rate="
branch=pyro.extended=,"view.sort_current = active,\"compare=-+---,d.is_open=,d.throttle_name=,d.complete=,d.down.rate=,d.up.rate=\"","view.sort_current = active,greater=d.up.rate="
schedule2 = sort_filter_active,12,20,((view.sort,active))

### end: Modifications for default views ###


### begin: Adding new useful views ###

# UI/VIEW: ADD collapsed RTCONTROL view for filtering results  (bound to '^' in rT-PS)
view.add = rtcontrol
view.filter = rtcontrol,false=
branch=pyro.extended=,"view.collapsed.toggle=rtcontrol"
branch=pyro.extended=,"schedule2 = bind_rtcontrol,0,0,\"ui.bind_key=download_list,^,ui.current_view.set=rtcontrol\""

# UI/VIEW: ADD collapsed MESSAGES view for tracker messages  (bound to '!' in rT-PS)  SORT it by DOWNLOADED TIME, group by THROTTLE, MESSAGE desc
view.add = messages
view.filter = messages,d.message=
branch=pyro.extended=,"view.collapsed.toggle=messages"
branch=pyro.extended=,"view.sort_new     = messages,\"compare=+-+,d.throttle_name=,d.message=,d.custom=tm_downloaded\"","view.sort_new     = messages,greater=d.message="
branch=pyro.extended=,"view.sort_current = messages,\"compare=+-+,d.throttle_name=,d.message=,d.custom=tm_downloaded\"","view.sort_current = messages,greater=d.message="
method.insert = ui.messages.show,simple,"ui.current_view.set=messages ;view.sort=messages ;print=$view.size=messages,\" message(s)!\""
branch=pyro.extended=,"schedule2 = bind_messages,0,0,\"ui.bind_key=download_list,!,ui.messages.show=\""

# UI/VIEW: ADD collapsed TRACKERS view  (bound to 't' in rT-PS)     SORT it by DOWNLOADED TIME desc, group by DOMAIN
branch=pyro.extended=,"view.add = trackers"
branch=pyro.extended=,"view.collapsed.toggle = trackers"
branch=pyro.extended=,"view.sort_new     = trackers,\"compare=+-,d.tracker_domain=,d.custom=tm_downloaded\""
branch=pyro.extended=,"view.sort_current = trackers,\"compare=+-,d.tracker_domain=,d.custom=tm_downloaded\""
branch=pyro.extended=,"schedule2 = bind_trackers,0,0,\"ui.bind_key=download_list,t,ui.current_view.set=trackers\""

# UI/VIEW: ADD collapsed TAGGED view for manually tag/select items  (bound to ':' in rT-PS)  ('.' = toggle focused item between tagged and untagged , 'T' = clear all tags)
view.add = tagged
view.persistent = tagged
branch=pyro.extended=,"view.collapsed.toggle=tagged"
method.insert = view.toggle_visible,simple,"branch=d.views.has=$argument.0=,view.set_not_visible=$argument.0=,view.set_visible=$argument.0="
method.insert = pyro.view_tagged_clear,simple|private,"view.filter=tagged,false= ;d.multicall2=default,d.views.remove=tagged"
branch=pyro.extended=,"schedule2 = bind_tag_toggle,0,0,\"ui.bind_key=download_list,.,view.toggle_visible=tagged\""
branch=pyro.extended=,"schedule2 = bind_tag_clear,0,0,\"ui.bind_key=download_list,T,pyro.view_tagged_clear=\""
branch=pyro.extended=,"schedule2 = bind_tag_show,0,0,\"ui.bind_key=download_list,:,ui.current_view.set=tagged\""

# UI/VIEW: ADD collapsed DATASIZE view  (bound to '<' in rT-PS)     SORT it by DATASIZE desc
view.add = datasize
branch=pyro.extended=,"view.collapsed.toggle=datasize"
branch=pyro.extended=,"view.sort_new     = datasize,\"compare=-,d.selected_size_bytes=\"","view.sort_new     = datasize,greater=d.selected_size_bytes="
branch=pyro.extended=,"view.sort_current = datasize,\"compare=-,d.selected_size_bytes=\"","view.sort_current = datasize,greater=d.selected_size_bytes="
branch=pyro.extended=,"schedule2 = bind_datasize,0,0,\"ui.bind_key=download_list,<,ui.current_view.set=datasize\""

# UI/VIEW: ADD collapsed UPLOADED DATA view  (bound to '>' in rT-PS)     SORT it by UPLOADED DATA desc, DOWNLOADED TIME desc
view.add = uploadeddata
branch=pyro.extended=,"view.collapsed.toggle=uploadeddata"
branch=pyro.extended=,"view.sort_new     = uploadeddata,\"compare=--,d.up.total=,d.custom=tm_downloaded\"","view.sort_new     = uploadeddata,greater=d.up.total="
branch=pyro.extended=,"view.sort_current = uploadeddata,\"compare=--,d.up.total=,d.custom=tm_downloaded\"","view.sort_current = uploadeddata,greater=d.up.total="
branch=pyro.extended=,"schedule2 = bind_uploadeddata,0,0,\"ui.bind_key=download_list,>,ui.current_view.set=uploadeddata\""

# UI/VIEW: ADD collapsed RATIO view  (bound to '%' in rT-PS)     SORT it by RATIO desc, UPLOADED DATA desc, DOWNLOADED TIME desc
view.add = ratio
branch=pyro.extended=,"view.collapsed.toggle=ratio"
branch=pyro.extended=,"view.sort_new     = ratio,\"compare=---,d.ratio=,d.up.total=,d.custom=tm_downloaded\"","view.sort_new     = ratio,greater=d.ratio="
branch=pyro.extended=,"view.sort_current = ratio,\"compare=---,d.ratio=,d.up.total=,d.custom=tm_downloaded\"","view.sort_current = ratio,greater=d.ratio="
branch=pyro.extended=,"schedule2 = bind_ratio,0,0,\"ui.bind_key=download_list,%,ui.current_view.set=ratio\""

# UI/VIEW: ADD collapsed CATEGORY view  (bound to '@' in rT-PS)     SORT it by CATEGORY (full path means NAME as well)
view.add = category
branch=pyro.extended=,"view.collapsed.toggle=category"
branch=pyro.extended=,"view.sort_new     = category,\"compare=+,d.get_data_full_path=\"","view.sort_new     = category,less=d.get_data_full_path="
branch=pyro.extended=,"view.sort_current = category,\"compare=+,d.get_data_full_path=\"","view.sort_current = category,less=d.get_data_full_path="
branch=pyro.extended=,"schedule2 = bind_category,0,0,\"ui.bind_key=download_list,@,ui.current_view.set=category\""

# UI/VIEW: ADD collapsed DELETABLE view  (bound to '?' in rT-PS)     SORT it by DOWNLOADED TIME, group by 'unsafe_data' desc, THROTTLE desc . Show deletable torrents.
view.add = deletable
view.filter = deletable,d.custom=unsafe_data
branch=pyro.extended=,"view.collapsed.toggle=deletable"
branch=pyro.extended=,"view.sort_new     = deletable,\"compare=--+,d.custom=unsafe_data,d.throttle_name=,d.custom=tm_downloaded\"","view.sort_new     = deletable,greater=d.custom=unsafe_data"
branch=pyro.extended=,"view.sort_current = deletable,\"compare=--+,d.custom=unsafe_data,d.throttle_name=,d.custom=tm_downloaded\"","view.sort_current = deletable,greater=d.custom=unsafe_data"
branch=pyro.extended=,"schedule2 = bind_deletable,0,0,\"ui.bind_key=download_list,?,\\\"ui.current_view.set=deletable ;view.sort=deletable\\\"\""

### end: Adding new useful views ###


### begin: Other UI enhancements ###

# UI/MONITOR: Show traffic of the last hour (bound to '=' key in rT-PS)
branch=pyro.extended=,"network.history.depth.set=112"
branch=pyro.extended=,"schedule2 = network_history_sampling,1,32,network.history.sample="
method.insert = network.history.auto_scale.toggle, simple|private, "branch=network.history.auto_scale=,\"network.history.auto_scale.set=0\",\"network.history.auto_scale.set=1\""
method.insert = network.history.auto_scale.ui_toggle, simple|private, "network.history.auto_scale.toggle= ;network.history.refresh="
branch=pyro.extended=,"schedule2 = bind_auto_scale,0,0,\"ui.bind_key=download_list,=,network.history.auto_scale.ui_toggle=\""

# UI/STATUS: Display additional throttle up info in status bar (it needs rT-PS-CH)
branch=pyro.extended=,"branch=pyro.extended.ch=,\"ui.status.throttle.up.set = slowup,tardyup\""

# UI/DOMAIN: Display tracker domain aliases
trackers.alias.set_key = bt1.archive.org,         "Archive"
trackers.alias.set_key = t.bitlove.org,           "BitLove"
trackers.alias.set_key = bundles.bittorrent.com,  "BitTorrent"
trackers.alias.set_key = bttracker.debian.org,    "Debian"
trackers.alias.set_key = etree.org,               "ETree"
trackers.alias.set_key = legittorrents.info,      "LegitTorrents"
trackers.alias.set_key = mininova.org,            "MiniNova"

### end: Other UI enhancements ###


### begin: Generic keybindings and attributes ###

# UI/KEY: Bind '*' to TOGGLE between COLLAPSED and EXPANDED display
branch=pyro.extended=,"schedule2 = bind_collapsed,0,0,\"ui.bind_key=download_list,*,view.collapsed.toggle=\""

# UI/KEY: Key bindings for special keys: HOME, END, PGUP, PGDN
branch=pyro.extended=,"schedule2 = bind_home,0,0,\"ui.bind_key=download_list,0406,ui.focus.home=\""
branch=pyro.extended=,"schedule2 = bind_end, 0,0,\"ui.bind_key=download_list,0550,ui.focus.end=\""
branch=pyro.extended=,"schedule2 = bind_pgup,0,0,\"ui.bind_key=download_list,0523,ui.focus.pgup=\""
branch=pyro.extended=,"schedule2 = bind_pgdn,0,0,\"ui.bind_key=download_list,0522,ui.focus.pgdn=\""

# UI/ATTRIB: Sets the number of items to skip on pgdn / pgup, default is: 50.
branch=pyro.extended=,"ui.focus.page_size.set   = \"30\""

# UI/KEY: Bind '#' to SEND SCRAPE REQUEST manually (with the help of custom method in main config)
branch=pyro.extended=,"schedule2 = bind_send_scrape,0,0,\"ui.bind_key=download_list,#,d.last_scrape.send_set=\""

# UI/KEY: Bind '}' to TOGGLE "unsafe_data" ATTRIBUTE: "", "1", "2"   ("2" means in delqueue)
method.insert = d.toggle_delqueue, simple|private, "branch=\"equal={d.custom=unsafe_data,cat=2}\",d.remove_from_delqueue=,\"branch=d.custom=unsafe_data,d.add_to_delqueue=,d.unsafe_data.set=1\""
branch=pyro.extended=,"schedule2 = bind_toggle_delqueue,0,0,\"ui.bind_key=download_list,\},d.toggle_delqueue=\""

# UI/KEY: Bind '|' to TOGGLE selectable THEMES defined at the top of this config file (Note: if a new theme is added to / removed from the available selection then this logic has to be modified as well!)
method.insert = pyro.theme.store_set, simple|private, "pyro.import=$cat=$argument.0= ;pyro.theme.selected.set=$argument.0="
method.insert = pyro.theme.toggle1, simple|private, "branch=\"equal={pyro.theme.selected=,cfg.theme.1=}\",pyro.theme.store_set=$cfg.theme.2=,pyro.theme.store_set=$cfg.theme.0="
method.insert = pyro.theme.toggle0, simple|private, "branch=\"equal={pyro.theme.selected=,cfg.theme.0=}\",pyro.theme.store_set=$cfg.theme.1=,pyro.theme.toggle1="
branch=pyro.extended=,"schedule2 = bind_toggle_theme,0,0,\"ui.bind_key=download_list,|,pyro.theme.toggle0=\""

# UI/KEY: Bind '^G' to DISPLAY the TAGS of the current download
branch=pyro.extended=,"schedule2 = bind_tag_show,0,0,\"ui.bind_key=download_list,^G,tag.show=\""

# UI/KEY: Bind '/' to TOGGLE visibility of extra COLUMNS
method.insert = ui.columns.extra.state, value|private, 1
method.insert = ui.columns.extra.enable,  simple|private, "\
       method.set_key = ui.column.render, \"100:1:☢\",  ((string.map, ((cat, ((d.is_open)), ((d.is_active)))), {00, \"▪\"}, {01, \"▪\"}, {10, \"╍\"}, {11, \"▹\"}));\
       method.set_key = ui.column.render, \"110:1:☍\",  ((if, ((d.tied_to_file)), ((cat, \"⚯\")), ((cat, \" \"))));\
       method.set_key = ui.column.render, \"120:1:⌘\",  ((if, ((d.ignore_commands)), ((cat, \"◌\")), ((cat, \"⚒\"))));\
       method.set_key = ui.column.render, \"310:1:⋮\",  ((if, ((d.down.rate)), ((if,((d.up.rate)),((cat, \"⇅\")),((cat, \"↡\")))), ((if,((d.up.rate)),((cat, \"↟\")),((cat, \" \")))) ));\
       method.set_key = ui.column.render, \"400:2: ↺\", ((convert.magnitude, ((d.tracker_scrape.downloaded)) ));\
       method.set_key = ui.column.render, \"410:2: ⤴\", ((convert.magnitude, ((d.tracker_scrape.complete)) ));\
       method.set_key = ui.column.render, \"420:2: ⤵\", ((convert.magnitude, ((d.tracker_scrape.incomplete)) ));\
       method.set_key = ui.column.render, \"430:2: ↻\", ((convert.magnitude, ((d.peers_connected)) ));\
       method.set_key = ui.column.render, \"700:6:   ⊼  \", ((if, ((d.up.total)), ((convert.human_size, ((d.up.total)), (value, 0) )), ((cat, \"   ·  \"))));\
       ui.columns.extra.state.set=1"
method.insert = ui.columns.extra.disable, simple|private, "\
       method.set_key = ui.column.render, \"100:1:☢\";\
       method.set_key = ui.column.render, \"110:1:☍\";\
       method.set_key = ui.column.render, \"120:1:⌘\";\
       method.set_key = ui.column.render, \"310:1:⋮\";\
       method.set_key = ui.column.render, \"400:2: ↺\";\
       method.set_key = ui.column.render, \"410:2: ⤴\";\
       method.set_key = ui.column.render, \"420:2: ⤵\";\
       method.set_key = ui.column.render, \"430:2: ↻\";\
       method.set_key = ui.column.render, \"700:6:   ⊼  \";\
       ui.columns.extra.state.set=0"
method.insert = ui.columns.extra.toggle,  simple, "branch=$ui.columns.extra.state=, ui.columns.extra.disable=, ui.columns.extra.enable="
branch=pyro.extended=,"schedule2 = toggle_extra_columns,0,0,\"ui.bind_key=download_list,/,ui.columns.extra.toggle=\""

### end: Generic keybindings and attributes ###

##### end: UI related commands and enhancements #####



##### begin: Unused pyroscope features #####

## UI/CMD: Housekeeping (delete item + data)
#method.insert = purge,simple|private,"execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",-q,--detach,--purge,--yes,\"$cat=hash=,$d.hash=\""
#method.insert = cull,simple|private,"execute.nothrow=\"$cat=$pyro.bin_dir=,rtcontrol\",-q,--detach,--cull,--yes,\"$cat=hash=,$d.hash=\""

## TORQUE/CMD: Daemon watchdog
#method.insert = pyro.watchdog,simple|private,"execute.nothrow=bash,-c,\"$cat=\\\"test ! -f \\\",$argument.0=,\\\"/run/pyrotorque || \\\",$pyro.bin_dir=,\\\"pyrotorque --cron \\\",$argument.1=\""

## TORQUE/SCHEDULE: Schedule daemon watchdog. Must be activated by touching the "~/.pyroscope/run/pyrotorque" file! Set the second argument to "-v" or "-q" to change log verbosity.
#schedule2 = pyro_watchdog,30,300,"pyro.watchdog=~/.pyroscope,"

## TORQUE/UI/VIEW: ADD collapsed PYROTORQUE view for queue manager job  (bound to 'Q' key in rT-PS)  SORT it by UPLOAD SPEED desc, group by OPEN desc, THROTTLE, COMPLETE desc, DOWNLOAD SPEED desc. Show active, incomplete torrents and update it in every 15 seconds.
#view.add = pyrotorque
#view.filter = pyrotorque,"or={d.up.rate=,d.down.rate=,d.peers_connected=,not=$d.complete=}"
#branch=pyro.extended=,"view.collapsed.toggle=pyrotorque"
#branch=pyro.extended=,"view.sort_new     = pyrotorque,\"compare=-+---,d.is_open=,d.throttle_name=,d.complete=,d.down.rate=,d.up.rate=\"","view.sort_new     = pyrotorque,greater=d.up.rate="
#branch=pyro.extended=,"view.sort_current = pyrotorque,\"compare=-+---,d.is_open=,d.throttle_name=,d.complete=,d.down.rate=,d.up.rate=\"","view.sort_current = pyrotorque,greater=d.up.rate="
#schedule2 = sort_filter_pyrotorque,1,15,"view.sort=pyrotorque"
#branch=pyro.extended=,"schedule2 = bind_pyrotorque,0,0,\"ui.bind_key=download_list,Q,ui.current_view.set=pyrotorque\""

##### end: Unused pyroscope features #####

